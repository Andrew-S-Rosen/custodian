#!/usr/bin/env python
# Copyright (c) Materials Virtual Lab.
# Distributed under the terms of the BSD License.

from __future__ import division, unicode_literals, print_function

import argparse

import sys
from monty.serialization import loadfn

from custodian.custodian import Custodian
import logging


example_yaml = """jobs: # Specifies a list of jobs to run.
- jb: custodian.vasp.jobs.VaspJob #Each job is specified by a full path
  params: #These are a list of kwargs given to each job.
    final: False
    suffix: .relax1
- jb: custodian.vasp.jobs.VaspJob
  params:
    final: True
    suffix: .relax2
    settings_override:
    - {"file": "CONTCAR", "action": {"_file_copy": {"dest": "POSCAR"}}}
- jb: custodian.vasp.jobs.VaspJob
  params:
    final: True
    suffix: .static3
    settings_override:
    - {"file": "CONTCAR", "action": {"_file_copy": {"dest": "POSCAR"}}}
    - {"dict": "INCAR", "action": {"_set": {"NSW": 0}}}
jobs_common_params: #This key specifies parameters common to all jobs.
  # Keys starting with $ means that the parameters should be expanded to the environmental values.
  $vasp_cmd: ["mpirun", "-machinefile", "$PBS_NODEFILE", "-np", "24", "/opt/vasp/5.4.1/bin/vasp"]

handlers: # Specifies a list of error handlers in the same format as jobs.
- hdlr: custodian.vasp.handlers.VaspErrorHandler
- hdlr: custodian.vasp.handlers.AliasingErrorHandler
- hdlr: custodian.vasp.handlers.MeshSymmetryErrorHandler

validators: # Specifies a list of error handlers in the same format as jobs.
- vldr: custodian.vasp.validators.VasprunXMLValidator

custodian_params: #This sets all custodian running parameters.
  max_errors: 10
  scratch_dir: /tmp
  gzipped_output: True
  checkpoint: True
"""


def run(args):
    FORMAT = '%(asctime)s %(message)s'
    logging.basicConfig(format=FORMAT, level=logging.INFO, filename="run.log")
    logging.info("Spec file is %s" % args.spec_file)
    d = loadfn(args.spec_file[0])
    c = Custodian.from_spec(d)
    c.run()


def print_example(args):
    print(example_yaml)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="""
    cstdn is a convenient script to run custodian style jobs using a
    simple YAML spec.""", epilog="""Author: Shyue Ping Ong""")

    subparsers = parser.add_subparsers()

    prun = subparsers.add_parser("run", help="Run custodian.")
    prun.add_argument("spec_file", metavar="spec_file", type=str, nargs=1,
                      help="YAML/JSON spec file.")
    prun.set_defaults(func=run)

    prun = subparsers.add_parser(
        "example", help="Print examples. Right now, there is only one example for VASP double relaxation.")
    prun.set_defaults(func=print_example)

    args = parser.parse_args()

    try:
        a = getattr(args, "func")
    except AttributeError:
        parser.print_help()
        sys.exit(0)
    args.func(args)

